import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
    id "org.jetbrains.kotlin.kapt" version "1.5.31"
}

group = 'ru.mainmayhem'
version = '1.1.3'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    google()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'

    //kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.5.31'

    //coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2-native-mt'

    //dagger
    implementation 'com.google.dagger:dagger:2.39.1'
    kapt 'com.google.dagger:dagger-compiler:2.39.1'

    //Ğ±Ğ´
    implementation('org.jetbrains.exposed:exposed-core:0.35.1')
    implementation('org.jetbrains.exposed:exposed-dao:0.35.1')
    implementation('org.jetbrains.exposed:exposed-jdbc:0.35.1')
    implementation('org.xerial:sqlite-jdbc:3.36.0.2')

    implementation("com.squareup.moshi:moshi-kotlin:1.12.0")

    compileOnly("me.clip:placeholderapi:2.10.10")

}

jar {
    archiveClassifier = getCheckedOutGitCommitHash()
    from {
        configurations.runtimeClasspath.filter{ it.exists() }.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

processResources {
    expand project.properties
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 12
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}
